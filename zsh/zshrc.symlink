# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

if test -f $ZSH/oh-my-zsh.sh
then
  source $ZSH/oh-my-zsh.sh
fi

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#
# Custom added by @DevSecNinja
#

# Import variables from .env
if test -f ~/.env
then
  set -o allexport
  source ~/.env
  set +o allexport
fi

# your project folder that we can `c [tab]` to
export PROJECTS=~/git

set_dotfiles_dir () {
  VS_CODE_DIR="/workspaces/.codespaces/.persistedshare/dotfiles"
  LOCAL_DIR="$(dirname $(dirname "$(readlink -f "$0")"))" 2> /dev/null
  DEFAULT_DIR=$(realpath $HOME/.dotfiles)

  if test -d $VS_CODE_DIR;
  then
    echo $VS_CODE_DIR
  # elif [[ $LOCAL_DIR != "." ]]
  # then
  #   echo $LOCAL_DIR
  else
    echo $DEFAULT_DIR
  fi
}

# shortcut to this dotfiles path is $DOTFILES
export DOTFILES=$(set_dotfiles_dir)

if ! [ -n "${DOTFILES}" ];
then
  echo "Couldn't determine dotfiles dir"
  exit 1
fi

### Config Files
# all of our zsh files
typeset -U config_files
config_files=($DOTFILES/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  # echo "Importing file: ${file}"
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  # echo "Importing file: ${file}"
  source $file
done
### Config Files

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# Load Brew environment variables
if [[ -a /home/linuxbrew/.linuxbrew/bin/brew ]]
then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# Load direnv hook for ZSH
if [[ -a /home/linuxbrew/.linuxbrew/bin/direnv ]]
then
  eval "$(direnv hook zsh)"
fi

# Finally
## Run Git Pull & bootstrap in the background to get the latest artifacts
background_job() {
  export BACKGROUND_JOB=true
  cd $DOTFILES
  echo "----------------------------------------" >> /tmp/zshrc-post.log
  echo "$(date +'%d/%m/%Y %H:%M:%S') - Running Git Pull" >> /tmp/zshrc-post.log
  git pull >> /tmp/zshrc-post.log
  echo "$(date +'%d/%m/%Y %H:%M:%S') - Running Bootstrap" >> /tmp/zshrc-post.log
  script/bootstrap >> /tmp/zshrc-post.log
  echo "$(date +'%d/%m/%Y %H:%M:%S') - Background Jobs Finished" >> /tmp/zshrc-post.log
  unset BACKGROUND_JOB
}

if [ "${DOTFILES_UPDATE_ON_LOGIN:-false}" = "true" ]; then
  silent_background background_job
fi

unset config_files
