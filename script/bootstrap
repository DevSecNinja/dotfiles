#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

make_zsh_default_shell () {
	# Check zsh is not already the default shell
	if ! grep -q "^$USER.*$HOME:$(which zsh)$" /etc/passwd
	then
		# Check zsh is installed, if not exit with warning
		if ! which zsh &> /dev/null
		then
			fail "Zsh is needed. Please install it via your prefered package manager."
		fi

		# If zsh is not listed as a shell, list it
		if ! grep -q "^$(which zsh)$" /etc/shells
		then
			info "Adding zsh to the list of shells (/etc/shells)"
			sudo sh -c 'echo /usr/local/bin/zsh >> /etc/shells'
		fi

		info "Making zsh default shell"
    sudo chsh -s $(which zsh) $(whoami)
	fi
}

setup_gitconfig () {
  git_local_config_file="git/gitconfig.local.symlink"
  git_local_config_file_example="git/gitconfig.local.symlink.example"

  if ! [ -f $git_local_config_file ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your GitHub author (full) name?'
    read -p "> " -e git_authorname
    user ' - What is your GitHub author email?'
    read -p "> " -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" $git_local_config_file_example > $git_local_config_file

    # When using WSL, make sure to use ssh.exe
    if grep -q -i "Microsoft" "/proc/version"
    then
      echo "Running on WSL, therefore setting ssh to ssh.exe to support 1Password SSH Auth"

      if ! $(grep -q "^\[core\]$" $git_local_config_file); then
        echo -e "\n[core]" >> $git_local_config_file
      fi

      if ! $(grep -q "^\s*sshCommand" $git_local_config_file); then
        sed -i -e '/^\[core\]$/a\\tsshCommand = ssh.exe' $git_local_config_file
      else
        sed -i -e 's/^\s*sshCommand.*/\tsshCommand = ssh.exe/' $git_local_config_file
      fi

    fi

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"

        if [ -z "$PS1" ]; then
          echo "... backing up since we are running non-interactively"
          action=b
        else
          read -n 1 action
        fi

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_vscodefiles () {
  info 'installing vscode files'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT/vscode" -maxdepth 1 -name '*.json' -not -path '*.git*')
  do
    if test "$(uname)" = "Darwin"
    then
      mkdir -p "$HOME/Library/Application\ Support/Code/User/"
      dst="$HOME/Library/Application\ Support/Code/User/$(basename "${src}")"
      link_file "$src" "$dst"
    elif test "$(expr substr $(uname -s) 1 5)" = "Linux"
    then
      mkdir -p "$HOME/.config/Code/User/"
      dst="$HOME/.config/Code/User/$(basename "${src}")"
      link_file "$src" "$dst"
    else
      echo "No compatible OS found to apply VS Code settings"
    fi
  done
}

make_zsh_default_shell

if [ -z "$PS1" ]; then
  echo "Skipping Git configuration since we are running non-interactive"
else
  setup_gitconfig
fi

install_dotfiles
install_vscodefiles

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ] || [ "$(uname -s)" == "Linux" ]
then
  info "installing dependencies"
  if source bin/dot | while read -r data; do info "$data"; done
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
