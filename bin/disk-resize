#!/bin/bash

# Original source: https://codenotary.com/blog/enlarge-a-disk-and-partition-of-any-linux-vm-without-a-reboot
# Tested on Debian 12 Bookworm

echo "This script is deprecated and will be removed in the future. Use the 'expand-disk' function instead."
exit 0

# Comment if script kills prematurely
set -e

LOGFILE=/tmp/resize.log
LOCKFILE=/tmp/enlarge.lock
export PATH=/usr/sbin:/usr/bin:/sbin:/bin

NEEDREBOOT=0

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    echo "Usage: disk-resize <disk> <partition number>"
    echo "Note that you need to run this from the parent (bin) directory with sudo"
    echo "Example: disk-resize /dev/sda 1"
    exit 1
fi

if [[ $# -ne 2 ]]; then
    echo "Error: Invalid number of arguments."
    echo "Use -h or --help flag for usage information."
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "Error: This script must be run as root" 1>&2
    exit 1
fi

echo "Attempting to resize disk $1 with partition number $2. Press enter to continue..."
read

# Doesn't work:
# PARTITION_EXISTS=$(lsblk -no name $1 | grep -w "$1$2")
# if [ -z "$PARTITION_EXISTS" ]; then
#     echo "Error: Partition $1$2 does not exist."
#     exit 1
# fi

echo "[+] Installing liblockfile dependency"
apt install liblockfile-bin
echo "[+] liblockfile dependency available"

dotlockfile -r 0 $LOCKFILE || exit 1

echo 1 > /sys/class/block/sda/device/rescan
echo "Sleeping 5 seconds..."
sleep 5
GROWPART_OUT=`growpart $1 $2`
if [ $? -eq 0 ]; then
    echo `date` >> $LOGFILE
    echo "Attempting to resize filesystem" >> $LOGFILE
    echo $GROWPART_OUT >> $LOGFILE
    resize2fs $1$2 >> $LOGFILE 2>&1
    echo `date` >> $LOGFILE
    echo "Resize done" >> $LOGFILE
    NEEDREBOOT=1
fi

dotlockfile -u $LOCKFILE

if [ $NEEDREBOOT -eq "1" ]; then
    echo "Server needs a reboot"
    if [ -n "${LOGFILE}" ]; then
        if [ -e "${LOGFILE}" ]; then
            echo "------------------------------"
            echo "The following log is available"
            cat "${LOGFILE}"
            rm "${LOGFILE}"
        else
            echo "No log was written to '${LOGFILE}'"
        fi
    fi
fi
